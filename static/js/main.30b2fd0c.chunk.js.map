{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["API_URL","App","file","setFile","useState","prediction","setPrediction","loading","setLoading","React","createElement","className","onSubmit","async","e","preventDefault","formData","FormData","append","response","fetch","method","body","result","json","error","console","type","accept","onChange","target","files","disabled","style","marginTop","Number","toFixed","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0LAGA,MAAMA,EAAU,2CAuDDC,MArDf,WACE,MAAOC,EAAMC,GAAWC,mBAAS,OAC1BC,EAAYC,GAAiBF,mBAAS,OACtCG,EAASC,GAAcJ,oBAAS,GA8BvC,OACEK,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,yBACJD,IAAAC,cAAA,QAAME,SA1BWC,UAEnB,GADAC,EAAEC,kBACGb,EAAM,OAEX,MAAMc,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQhB,GAExBM,GAAW,GACX,IACE,MAAMW,QAAiBC,MAAMpB,EAAS,CACpCqB,OAAQ,OACRC,KAAMN,IAGFO,QAAeJ,EAASK,OAC9BlB,EAAciB,EAAOlB,YACrB,MAAOoB,GACPC,QAAQD,MAAM,qBAAsBA,GACrC,QACCjB,GAAW,MAQTC,IAAAC,cAAA,SAAOiB,KAAK,OAAOC,OAAO,OAAOC,SAhCbf,IACxBX,EAAQW,EAAEgB,OAAOC,MAAM,IACvBzB,EAAc,SA+BVG,IAAAC,cAAA,UAAQiB,KAAK,SAASK,SAAUzB,GAC7BA,EAAU,gBAAkB,qBAIhCF,GACCI,IAAAC,cAAA,OAAKuB,MAAO,CAAEC,UAAW,SACvBzB,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAAA,SAAG,IAAEyB,OAAO9B,GAAY+B,QAAQ,OCvC3BC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAA1B,EAAA,GAAA2B,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH5C,IAAAC,cAACD,IAAM6C,WAAU,KACf7C,IAAAC,cAACT,EAAG,QAORoC","file":"static/js/main.30b2fd0c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nconst API_URL = \"https://wageinsight.onrender.com/predict\";\r\n\r\nfunction App() {\r\n  const [file, setFile] = useState(null);\r\n  const [prediction, setPrediction] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleFileChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n    setPrediction(null);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!file) return;\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(API_URL, {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      const result = await response.json();\r\n      setPrediction(result.prediction);\r\n    } catch (error) {\r\n      console.error('Prediction failed:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>WageInsight Predictor</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"file\" accept=\".csv\" onChange={handleFileChange} />\r\n        <button type=\"submit\" disabled={loading}>\r\n          {loading ? \"Predicting...\" : \"Upload & Predict\"}\r\n        </button>\r\n      </form>\r\n\r\n      {prediction && (\r\n        <div style={{ marginTop: '20px' }}>\r\n          <h2>Estimated Wage:</h2>\r\n          <p>${Number(prediction).toFixed(2)}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}