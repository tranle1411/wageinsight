{"version":3,"sources":["utils/loadCsvOptions.js","WageInsightForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["async","loadCsvOptions","url","response","fetch","lines","text","trim","split","values","Set","line","value","add","Array","from","sort","API_URL","basicFields","advancedFields","WageInsightForm","mode","setMode","useState","formData","setFormData","fieldOptions","setFieldOptions","prediction","setPrediction","loading","setLoading","fields","useEffect","prefix","options","AGE","length","_","i","EDUC","DEGFIELD1","DEGFIELD2","OCC","IND","RACE","WORKSTATE","SEX","MARST","VETSTAT","HISPAN","CITIZEN","SPEAKENG","loadAll","handleChange","e","[object Object]","target","name","React","createElement","className","style","marginBottom","onChange","onSubmit","preventDefault","method","headers","Content-Type","body","JSON","stringify","inputs","data","json","err","console","error","map","field","key","required","option","type","disabled","marginTop","toLocaleString","undefined","maximumFractionDigits","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5226ee73.chunk.js","sourcesContent":["export async function loadCsvOptions(url) {\r\n  const response = await fetch(url);\r\n  const text = await response.text();\r\n  const lines = text.trim().split('\\n');\r\n\r\n  const values = new Set();\r\n  for (const line of lines) {\r\n    const value = line.trim();\r\n    values.add(value);\r\n  }\r\n\r\n  return Array.from(values).sort();\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { loadCsvOptions } from './utils/loadCsvOptions';\r\n\r\nconst API_URL = 'https://wageinsight.onrender.com/predict_form';\r\n\r\nconst basicFields = ['AGE', 'OCC', 'IND', 'DEGFIELD1', 'EDUC', 'WORKSTATE'];\r\nconst advancedFields = [\r\n  'SEX', 'AGE', 'MARST', 'VETSTAT', 'HISPAN', 'CITIZEN',\r\n  'SPEAKENG', 'OCC', 'IND', 'EDUC', 'DEGFIELD1', 'DEGFIELD2', 'RACE', 'WORKSTATE'\r\n];\r\n\r\nfunction WageInsightForm() {\r\n  const [mode, setMode] = useState('basic');\r\n  const [formData, setFormData] = useState({});\r\n  const [fieldOptions, setFieldOptions] = useState({});\r\n  const [prediction, setPrediction] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fields = mode === 'basic' ? basicFields : advancedFields;\r\n\r\n  useEffect(() => {\r\n    async function loadAll() {\r\n      const prefix = \"/wageinsight/options/\";\r\n      const options = {\r\n        AGE: Array.from({ length: 48 }, (_, i) => i + 18), // Ages 18 to 65\r\n        EDUC: await loadCsvOptions(prefix + \"educ.csv\"),\r\n        DEGFIELD1: await loadCsvOptions(prefix + \"degree.csv\"),\r\n        DEGFIELD2: await loadCsvOptions(prefix + \"degree.csv\"),\r\n        OCC: await loadCsvOptions(prefix + \"occupation.csv\"),\r\n        IND: await loadCsvOptions(prefix + \"industry.csv\"),\r\n        RACE: await loadCsvOptions(prefix + \"race.csv\"),\r\n        WORKSTATE: await loadCsvOptions(prefix + \"state.csv\"),\r\n        SEX: ['Man', 'Woman'],\r\n        MARST: ['Married', 'Not married'],\r\n        VETSTAT: ['Veteran', 'Not a veteran'],\r\n        HISPAN: ['Hispanic', 'Not Hispanic'],\r\n        CITIZEN: ['Citizen', 'Not citizen'],\r\n        SPEAKENG: ['Speaks English', 'Does not speak English']\r\n      };\r\n      setFieldOptions(options);\r\n    }\r\n  \r\n    loadAll();\r\n  }, []);\r\n  \r\n\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(API_URL, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ mode, inputs: formData })\r\n      });\r\n      const data = await response.json();\r\n      setPrediction(data.prediction);\r\n    } catch (err) {\r\n      console.error('Error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>WageInsight Predictor</h1>\r\n\r\n      <div style={{ marginBottom: '1rem' }}>\r\n        <label>\r\n          <strong>Select Mode:</strong>\r\n          <select value={mode} onChange={(e) => setMode(e.target.value)}>\r\n            <option value=\"basic\">Basic</option>\r\n            <option value=\"advanced\">Advanced</option>\r\n          </select>\r\n        </label>\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        {fields.map((field) => (\r\n          <div key={field} style={{ marginBottom: '0.75rem' }}>\r\n            <label>\r\n              {field}:&nbsp;\r\n              <select name={field} onChange={handleChange} required>\r\n                <option value=\"\">-- select --</option>\r\n                {(fieldOptions[field] || []).map((option) => (\r\n                  <option key={option} value={option}>{option}</option>\r\n                ))}\r\n              </select>\r\n            </label>\r\n          </div>\r\n        ))}\r\n        <button type=\"submit\" disabled={loading}>\r\n          {loading ? 'Predicting...' : 'Predict Salary'}\r\n        </button>\r\n      </form>\r\n\r\n      {prediction && (\r\n        <div style={{ marginTop: '2rem' }}>\r\n          <h2>Estimated Salary:</h2>\r\n          <p><strong>${prediction.toLocaleString(undefined, { maximumFractionDigits: 2 })}</strong></p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WageInsightForm;\r\n","import React from 'react';\r\nimport WageInsightForm from './WageInsightForm';\r\n\r\nfunction App() {\r\n  return <WageInsightForm />;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}